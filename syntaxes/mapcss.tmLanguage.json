{
	"information_for_contributors": [
		"Please refer to: https://wiki.openstreetmap.org/wiki/MapCSS/0.2",
		"and https://josm.openstreetmap.de/wiki/Help/Styles/MapCSSImplementation",
		"Based on https://github.com/microsoft/vscode/blob/main/extensions/scss/syntaxes/scss.tmLanguage.json",
		"and https://github.com/Microsoft/vscode/blob/main/extensions/css/syntaxes/css.tmLanguage.json"
	],
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "MapCSS",
	"patterns": [
		{
			"include": "#at_rule_import"
		},
		{
			"include": "#selectors"
		},
		{
			"include": "#comment_block"
		},
		{
			"include": "#comment_line"
		},
		{
			"include": "#selector_placeholder"
		},
		{
			"include": "#expressions"
		},
		{
			"include": "#validator_props"
		},
		{
			"include": "#props"
		},
		{
			"include": "#validator_functions"
		},
		{
			"include": "#hex_colors"
		}
	],
	"repository": {
		"tag_wildcard": {
			"match": "(\\*)",
			"captures": {
				"1": {
					"name": "entity.name.tag.wildcard.mapcss"
				}
			}
		},
		"tag_types": {
			"match": "\\b(node|way|relation|area|line|canvas)\\b",
			"name": "entity.name.tag.types.mapcss"
		},
		"validator_functions": {
			"match": "\\b(group|throwError|throwWarning|throwOther|fixAdd|fixRemove|fixChangeKey|fixDeleteObject|suggestAlternative|assertMatch|assertNoMatch):",
			"captures": {
				"1": {
					"name": "support.function.mapcss"
				}
			}
		},
		"expressions": {
			"match": "\\b(cond|list|get|split|prop|prop|is_prop_set|tag|parent_tag|parent_tags|has_tag_key|rgb|hsb_color|red|alpha|length|count|length|any|concat|join|join_list|upper|lower|title|trim|trim_list|JOSM_search|tr|regexp_test|regexp_test|regexp_match|regexp_match|substring|substring|replace|osm_id|osm_user_name|osm_user_id|osm_version|osm_changeset_id|osm_timestamp|parent_osm_id|URL_encode|URL_decode|XML_encode|CRC32_checksum|is_right_hand_traffic|number_of_tags|print|println|JOSM_pref|setting|degree_to_radians|cardinal_to_radians|waylength|areasize|at|is_similar|gpx_distance|count_roles|sort|sort_list|tag_regex|to_boolean|to_byte|to_short|to_int|to_long|to_float|to_double|uniq|uniq_list|parent_way_angle|convert_primitive_to_string|convert_primitives_to_string|parent_osm_primitives)\\b\\(",
			"captures": {
				"1": {
					"name": "entity.name.function.mapcss"
				}
			}
		},
		"validator_props": {
			"match": "\\s+(-[a-z][a-zA-Z]+)\\b",
			"name": "variable.other.mapcss"
		},
		"props": {
			"match": "(?:repeat-image|text|dashes|color|width|line(?:cap|join)|miterlimit|font|casing|fill|default|icon|symbol|modifier|opacity|object|major|z-index)+(?:-halo)?(?:-(?:width|[hw]eight|align|offset(?:-[xy])?|spacing|phase|style|color|opacity|size|family|rotation|position|extent|threshold|background|anchor|horizontal|vertical|radius|image|points|lines|stroke|fill|shape|z-index))*",
			"name": "support.class.mapcss"
		},
		"selector_placeholder": {
			"match": "{\\b[0-9]+\\.(key|value|tag)}",
			"captures": {
				"1": {
					"name": "variable.other.mapcss"
				}
			}
		},
		"hex_colors": {
			"match": "(#(?:[a-zA-Z0-9]{6}|[a-zA-Z0-9]{3}))\\b",
			"name": "constant.other.mapcss"
		},
		"pseudo-classes": {
			"captures": {
				"1": {
					"name": "punctuation.definition.entity.mapcss"
				}
			},
			"match": "(:*)(?:active|hover)",
			"name": "entity.other.attribute-name.pseudo-class.mapcss"
		},
		"josm-pseudo-classes": {
			"captures": {
				"1": {
					"name": "punctuation.definition.entity.mapcss"
				}
			},
			"match": "(:*)(?:closed|closed2|completely_downloaded|new|connection|unconnected|tagged|area-style|righthandtraffic|clockwise|anticlockwise|unclosed_multipolygon|open_end|in-downloaded-area|selected|highlighted|modified)",
			"name": "entity.other.attribute-name.pseudo-class.mapcss"
		},
		"josm-layer-names": {
			"captures": {
				"1": {
					"name": "punctuation.definition.entity.mapcss"
				}
			},
			"match": "::([a-z_]+)",
			"name": "entity.other.attribute-name.layer-name.mapcss"
		},
		"selector_gut": {
			"patterns": [
				{
					"include": "#comment-block"
				},
				{
					"include": "#commas"
				},
				{
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.entity.begin.bracket.square.mapcss"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.entity.end.bracket.square.mapcss"
						}
					},
					"name": "meta.attribute-selector.mapcss",
					"patterns": [
						{
							"include": "#comment-block"
						},
						{
							"include": "#string"
						}
					]
				},
				{
					"include": "#pseudo-classes"
				},
				{
					"include": "#josm-pseudo-classes"
				},
				{
					"include": "#josm-layer-names"
				}

			]
		},
		"selectors": {
			"patterns": [
				{
					"include": "#tag_types"
				},
				{
					"include": "#tag_wildcard"
				},
				{
					"include": "#selector_gut"
				}
			]
		},
		"comparison_operators": {
			"match": "=|!=|<=|>=|<|>|=~|~=",
			"name": "keyword.operator.comparison.mapcss"
		},
		"commas": {
			"match": ",",
			"name": "punctuation.separator.list.comma.mapcss"
		},
		"comment_block": {
			"begin": "/\\*",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.mapcss"
				}
			},
			"end": "\\*/",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.comment.mapcss"
				}
			},
			"name": "comment.block.mapcss"
		},
		"comment_line": {
			"begin": "//",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.mapcss"
				}
			},
			"end": "\\n",
			"name": "comment.line.mapcss"
		},
		"at_rule_import": {
			"begin": "\\s*((@)import\\b)\\s*",
			"captures": {
				"1": {
					"name": "keyword.control.at-rule.import.mapcss"
				},
				"2": {
					"name": "punctuation.definition.keyword.mapcss"
				}
			},
			"end": "\\s*((?=;)|(?=}))",
			"name": "meta.at-rule.import.mapcss",
			"patterns": [
				{
					"include": "#url"
				},
				{
					"include": "#comment_line"
				}
			]
		},
		"escapes": {
			"patterns": [
				{
					"match": "\\\\[0-9a-fA-F]{1,6}",
					"name": "constant.character.escape.codepoint.mapcss"
				},
				{
					"begin": "\\\\$\\s*",
					"end": "^(?<!\\G)",
					"name": "constant.character.escape.newline.mapcss"
				},
				{
					"match": "\\\\.",
					"name": "constant.character.escape.mapcss"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.mapcss"
						}
					},
					"end": "\"|(?<!\\\\)(?=$|\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.mapcss"
						}
					},
					"name": "string.quoted.double.mapcss",
					"patterns": [
						{
							"begin": "(?:\\G|^)(?=(?:[^\\\\\"]|\\\\.)+$)",
							"end": "$",
							"name": "invalid.illegal.unclosed.string.mapcss",
							"patterns": [
								{
									"include": "#escapes"
								}
							]
						},
						{
							"include": "#escapes"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.mapcss"
						}
					},
					"end": "'|(?<!\\\\)(?=$|\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.mapcss"
						}
					},
					"name": "string.quoted.single.mapcss",
					"patterns": [
						{
							"begin": "(?:\\G|^)(?=(?:[^\\\\']|\\\\.)+$)",
							"end": "$",
							"name": "invalid.illegal.unclosed.string.mapcss",
							"patterns": [
								{
									"include": "#escapes"
								}
							]
						},
						{
							"include": "#escapes"
						}
					]
				}
			]
		},
		"url": {
			"begin": "(?i)(?<![\\w@-])(url)(\\()",
			"beginCaptures": {
				"1": {
					"name": "support.function.url.mapcss"
				},
				"2": {
					"name": "punctuation.section.function.begin.bracket.round.mapcss"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.function.end.bracket.round.mapcss"
				}
			},
			"name": "meta.function.url.mapcss",
			"patterns": [
				{
					"match": "[^'\")\\s]+",
					"name": "variable.parameter.url.mapcss"
				},
				{
					"include": "#string"
				},
				{
					"include": "#comment-block"
				}
			]
		}
	},
	"scopeName": "source.mapcss"
}